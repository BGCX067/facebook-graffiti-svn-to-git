package {	import flash.display.*;	import flash.geom.*;	import flash.utils.ByteArray;		import com.adobe.images.JPGEncoder;	import com.adobe.crypto.MD5;	import com.adobe.serialization.json.JSON;	import com.shtif.web.MIMEConstructor;		import com.adobe.serialization.json.JSON;		//import fl.motion.*;	public class Actions extends MovieClip	{				public var canvas:Canvas;		public var actions:Array; // array of actions		public var snapshot:ByteArray; // the snapshot created by composite()				private var m_mcCompositeContainer;		private var m_mcCompositeLayers;				public function Actions(canvas:Canvas)		{			this.canvas = canvas;						actions = new Array();		}				public function saveCurve(points:Array)		{			// TODO: append {			//   o: canvas.brush_opacity			//   w: canvas.brush_width,			//   c: canvas.brush_color,			//   b: [ points[0], points[1], points[2], ... points[n] ]			// } to the actions array		}				public function saveText(x_percent:Number, y_percent:Number, caption:String)		{			// TODO: append {			//   o: canvas.brush_opacity			//   w: canvas.brush_width,			//   c: canvas.brush_color,			//   b: [ points[0], points[1], points[2], ... points[n] ]			// } to the actions array		}				public function newLayer()		{			// TODO: append {l: actions.currentLayerIndex+1} to the actions array		}				public function save()		{			// TODO:			// serialize the actions array into JSON			// call removeActionsAfterLayer();			// call composite() // which sets this.snapshot			// call sendSnapshot();			// use the canvas.tags array			// construct a request and send it						// If the proxy was on another domain, we should do this:			//System.security.loadPolicyFile()		}				public function composite()		{			// TODO: make an offscreen mcCompositeContainer			// if not yet loaded, load the picture through the PROXY			// because we'll need to access its pixels in the screenshot			// copy all the layers in it			// take screenshot, assign the bytearray to this.snapshot		}				public function sendSnapshot()		{		}				public function scrollTo(offset_x:Number, offset_y:Number)		{			// TODO: append {st_x: offset_x, st_y: offset_y} to the actions array		}				public function zoom(factor:Number)		{			// TODO: append {z: factor} to the actions array		}				public function removeActionsAfterLayer(index:int)		{			// TODO: clamp the index to [0, mcCanvasLayers.length-1]			// TODO: go backwards through the action array until we reach {l: index}			// remove all the actions after that (that would include zooms and other actions, too).		}	}}